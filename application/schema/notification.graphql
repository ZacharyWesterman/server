type Notification {
	recipient: String!
	created: DateTime!
	message: String!
	category: String!
	device_count: Int!
	read: Boolean!
	id: String!
}

type MissingConfig {
	message: String!
}

type WebPushException {
	message: String!
}

type InvalidSubscriptionToken {
	message: String!
}

type BadNotification {
	message: String!
}

type Subscription {
	endpoint: String!
	expirationTime: String!
	keys: SubscriptionKeys!
}

type SubscriptionKeys {
	p256dh: String!
	auth: String!
}

type SubscriptionList {
	list: [Subscription!]!
}

input SubscriptionToken {
	endpoint: String!
	expirationTime: String
	keys: SubscriptionTokenKeys!
}

input SubscriptionTokenKeys {
	p256dh: String!
	auth: String!
}

union NotificationResponse = Notification | MissingConfig | UserDoesNotExistError | WebPushException | InvalidSubscriptionToken | BadNotification | InsufficientPerms
union SubscriptionListResponse = SubscriptionList | UserDoesNotExistError | InsufficientPerms

#Resolvers below this line

extend type Query {
	getVAPIDPublicKey: String!
	getSubscription(auth: String!): Subscription
	getSubscriptions(username: String!): SubscriptionListResponse!
	getNotifications(username: String!, read: Boolean!, start: Int!, count: Int!): [Notification!]!
	countNotifications(username: String!, read: Boolean!): Int!
}

extend type Mutation {
	createSubscription(username: String!, subscription: SubscriptionToken!): NotificationResponse!
	deleteSubscription(auth: String!): Int!
	deleteSubscriptions(username: String!): Int!
	sendNotification(username: String!, title: String!, body: String!, category: String): NotificationResponse!
	markNotifAsRead(id: String!): Boolean!
	markAllNotifsAsRead(username: String!): Boolean!
}
