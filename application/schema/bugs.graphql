type BugReport {
	id: String!
	created: DateTime!
	creator: String!
	body: String!
	body_html: String!
	convo: [BugComment!]!
	resolved: Boolean!
}

type BugComment {
	created: DateTime!
	creator: String!
	body: String!
	body_html: String!
}

type BugReportDoesNotExistError {
	message: String!
}

type BugReportCreationFailedError {
	message: String!
}

type RepositoryIssue {
	title: String!
	state: String!
	number: Int!
	labels: [IssueLabel!]!
}

type IssueLabel {
	name: String!
	color: String!
	description: String!
}

union BugReportCreateAction = BugReport | BugReportCreationFailedError | InsufficientPerms
union BugReportEditAction = BugReport | BugReportDoesNotExistError | InsufficientPerms

#Resolvers below this line:

extend type Query {
	getBugReports(username: String, start: Int!, count: Int!, resolved: Boolean!) : [BugReport!]!
	countBugReports(username: String, resolved: Boolean!) : Int!
	getBugReport(id: String!): BugReport
	getOpenIssues: [RepositoryIssue!]!
	getPendingIssues: [RepositoryIssue!]!
}

extend type Mutation {
	reportBug(text: String!, plaintext: Boolean!): BugReportCreateAction!
	deleteBug(id: String!): BugReportEditAction!
	setBugStatus(id: String!, status: Boolean!): BugReportEditAction!
	commentOnBug(id: String!, text: String!, plaintext: Boolean!): BugReportEditAction!
}
