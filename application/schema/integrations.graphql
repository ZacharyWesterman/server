type SubsonicSearch {
	album: [SubsonicAlbum!]!
}

type SubsonicAlbum {
	id: String!
	parent: String!
	isDir: Boolean!
	title: String!
	album: String!
	artist: String!
	year: Int
	genre: String
	coverArt: String
	playCount: Int!
	created: DateTime!
	tracks: [SubsonicTrack!]!
}

type SubsonicTrack {
	id: String!
	title: String!
	duration: Int!
}

type SubsonicError {
	message: String!
}

type DiskUsage {
	name: String!
	total: Float!
	free: Float!
	used: Float!
}

type SystemInfo {
	storage: [DiskUsage!]!
}

union SubsonicSearchResult = SubsonicSearch | SubsonicError

#Resolvers below this line:

extend type Query {
	searchSubsonic (query: String!, start: Int!, count: Int!): SubsonicSearchResult!
	getSystemInfo: SystemInfo!
}